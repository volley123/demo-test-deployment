name: Deploy Selected Lambdas Latest Dev

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy to particualr branch (dev, uat, prod)'
        required: true
        default: 'dev'
      lambda_functions:
        description: 'Comma-separated list of Lambdas to deploy (e.g., commercetools-algolia-daily-price-sync-aws-lambda, commercetools-shipping-lambda)'
        required: true

jobs:
  deploy_selected:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: Check AWS CLI version
        run: aws --version  # Verify AWS CLI is installed and working  

      - name: Deploy Selected Lambdas
        run: |
          # Loop through each lambda function provided in the input
          for lambda in $(echo "${{ github.event.inputs.lambda_functions }}" | tr ',' ' '); do
            echo "Deploying $lambda to ${{ github.event.inputs.environment }} environment"

            # Set the appropriate Lambda directory
            lambda_dir="external/scripts/$lambda"

            # Check if the directory exists before proceeding
            if [ ! -d "$lambda_dir" ]; then
              echo "Lambda function directory $lambda_dir does not exist, skipping..."
              continue
            fi

            # Build the Lambda function
            echo "Building function $lambda for environment ${{ github.event.inputs.environment }}"
            cd $lambda_dir
            yarn install
            yarn build
            mkdir -p build
            cd build
            zip -r deployment_package.zip .

            # Deploy to AWS Lambda
            echo "Deploying $lambda to AWS Lambda in the ${{ github.event.inputs.environment }} environment"
            aws lambda update-function-code \
              --function-name "${{ github.event.inputs.environment }}-${lambda}" \
              --zip-file fileb://deployment_package.zip \
              --region ap-south-1 

            # Cleanup the zip file and return to the root directory
            rm deployment_package.zip
            cd ../../..
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}